# Financial Management Application Requirements

## Local Storage Implementation

### Storage Keys Structure
```typescript
private static readonly STORAGE_KEYS = {
  TRANSACTIONS: 'financeApp_transactions',
  BUDGETS: 'financeApp_budgets',
  SAVINGS_GOALS: 'financeApp_savings',
  CATEGORIES: 'financeApp_categories',
  BILLS: 'financeApp_bills',
  ACCOUNTS: 'financeApp_accounts',
  NOTIFICATIONS: 'financeApp_notifications',
  SETTINGS: 'financeApp_settings'
};
```

### Data Types

```typescript
interface Transaction {
  id: string;
  amount: number;
  type: 'income' | 'expense';
  category: string;
  description: string;
  date: string;
  accountId: string;
  receiptImage?: string; // Base64 encoded
  isRecurring: boolean;
  recurringDetails?: {
    frequency: 'daily' | 'weekly' | 'monthly';
    endDate?: string;
  };
}

interface Budget {
  id: string;
  categoryId: string;
  amount: number;
  spent: number;
  period: 'monthly' | 'weekly';
  startDate: string;
  endDate: string;
}

interface SavingsGoal {
  id: string;
  name: string;
  targetAmount: number;
  currentAmount: number;
  deadline: string;
  category: string;
  color: string;
}

interface Category {
  id: string;
  name: string;
  color: string;
  icon: string;
  type: 'income' | 'expense';
}

interface Bill {
  id: string;
  name: string;
  amount: number;
  dueDate: string;
  isPaid: boolean;
  category: string;
  recurringDetails?: {
    frequency: 'monthly' | 'weekly';
    endDate?: string;
  };
}

interface Account {
  id: string;
  name: string;
  type: 'savings' | 'checking' | 'credit';
  balance: number;
  color: string;
}

interface Notification {
  id: string;
  type: 'bill' | 'budget' | 'goal';
  message: string;
  date: string;
  isRead: boolean;
  relatedId: string;
}

interface Settings {
  theme: 'light' | 'dark';
  currency: string;
  notifications: {
    billReminders: boolean;
    budgetAlerts: boolean;
    goalAchievements: boolean;
  };
}
```

### Storage Methods

```typescript
export class FinanceStorageManager {
  // Transaction Management
  static saveTransactions(transactions: Transaction[]): void {
    localStorage.setItem(this.STORAGE_KEYS.TRANSACTIONS, JSON.stringify(transactions));
  }

  static getTransactions(): Transaction[] {
    const transactions = localStorage.getItem(this.STORAGE_KEYS.TRANSACTIONS);
    return transactions ? JSON.parse(transactions) : [];
  }

  static addTransaction(transaction: Transaction): void {
    const transactions = this.getTransactions();
    transactions.push(transaction);
    this.saveTransactions(transactions);
    this.updateBudgetSpending(transaction);
  }

  // Budget Management
  static saveBudgets(budgets: Budget[]): void {
    localStorage.setItem(this.STORAGE_KEYS.BUDGETS, JSON.stringify(budgets));
  }

  static getBudgets(): Budget[] {
    const budgets = localStorage.getItem(this.STORAGE_KEYS.BUDGETS);
    return budgets ? JSON.parse(budgets) : [];
  }

  static updateBudgetSpending(transaction: Transaction): void {
    if (transaction.type === 'expense') {
      const budgets = this.getBudgets();
      const relevantBudget = budgets.find(b => b.categoryId === transaction.category);
      if (relevantBudget) {
        relevantBudget.spent += transaction.amount;
        this.saveBudgets(budgets);
        this.checkBudgetAlerts(relevantBudget);
      }
    }
  }

  // Savings Goals Management
  static saveSavingsGoals(goals: SavingsGoal[]): void {
    localStorage.setItem(this.STORAGE_KEYS.SAVINGS_GOALS, JSON.stringify(goals));
  }

  static getSavingsGoals(): SavingsGoal[] {
    const goals = localStorage.getItem(this.STORAGE_KEYS.SAVINGS_GOALS);
    return goals ? JSON.parse(goals) : [];
  }

  static updateGoalProgress(goalId: string, amount: number): void {
    const goals = this.getSavingsGoals();
    const goal = goals.find(g => g.id === goalId);
    if (goal) {
      goal.currentAmount += amount;
      this.saveSavingsGoals(goals);
      this.checkGoalAchievement(goal);
    }
  }

  // Bill Management
  static saveBills(bills: Bill[]): void {
    localStorage.setItem(this.STORAGE_KEYS.BILLS, JSON.stringify(bills));
  }

  static getBills(): Bill[] {
    const bills = localStorage.getItem(this.STORAGE_KEYS.BILLS);
    return bills ? JSON.parse(bills) : [];
  }

  // Notification Management
  static saveNotifications(notifications: Notification[]): void {
    localStorage.setItem(this.STORAGE_KEYS.NOTIFICATIONS, JSON.stringify(notifications));
  }

  static getNotifications(): Notification[] {
    const notifications = localStorage.getItem(this.STORAGE_KEYS.NOTIFICATIONS);
    return notifications ? JSON.parse(notifications) : [];
  }

  static addNotification(notification: Notification): void {
    const notifications = this.getNotifications();
    notifications.push(notification);
    this.saveNotifications(notifications);
  }

  // Settings Management
  static saveSettings(settings: Settings): void {
    localStorage.setItem(this.STORAGE_KEYS.SETTINGS, JSON.stringify(settings));
  }

  static getSettings(): Settings {
    const settings = localStorage.getItem(this.STORAGE_KEYS.SETTINGS);
    return settings ? JSON.parse(settings) : defaultSettings;
  }

  // Utility Functions
  static checkBudgetAlerts(budget: Budget): void {
    const spentPercentage = (budget.spent / budget.amount) * 100;
    if (spentPercentage >= 80) {
      this.addNotification({
        id: crypto.randomUUID(),
        type: 'budget',
        message: `You've spent ${spentPercentage}% of your ${budget.categoryId} budget`,
        date: new Date().toISOString(),
        isRead: false,
        relatedId: budget.id
      });
    }
  }

  static checkGoalAchievement(goal: SavingsGoal): void {
    if (goal.currentAmount >= goal.targetAmount) {
      this.addNotification({
        id: crypto.randomUUID(),
        type: 'goal',
        message: `Congratulations! You've achieved your ${goal.name} savings goal!`,
        date: new Date().toISOString(),
        isRead: false,
        relatedId: goal.id
      });
    }
  }

  static exportData(): string {
    const data = {
      transactions: this.getTransactions(),
      budgets: this.getBudgets(),
      savingsGoals: this.getSavingsGoals(),
      bills: this.getBills(),
      notifications: this.getNotifications(),
      settings: this.getSettings()
    };
    return JSON.stringify(data);
  }

  static importData(jsonData: string): void {
    try {
      const data = JSON.parse(jsonData);
      if (data.transactions) this.saveTransactions(data.transactions);
      if (data.budgets) this.saveBudgets(data.budgets);
      if (data.savingsGoals) this.saveSavingsGoals(data.savingsGoals);
      if (data.bills) this.saveBills(data.bills);
      if (data.notifications) this.saveNotifications(data.notifications);
      if (data.settings) this.saveSettings(data.settings);
    } catch (error) {
      console.error('Error importing data:', error);
      throw new Error('Invalid import data format');
    }
  }

  static clearAll(): void {
    Object.values(this.STORAGE_KEYS).forEach(key => localStorage.removeItem(key));
  }
}
```

## Core Features (Updated)

Financial Management

Transaction Management

Add/Edit/Delete transactions
Transaction categorization
Receipt photo upload
Transaction search and filtering
Recurring transaction support


Budgeting

Monthly budget setting
Category-wise budget allocation
Budget vs. actual spending tracking
Budget alerts and notifications
Custom budget periods


Analytics & Reporting

Expense breakdown charts
Income vs. Expense analysis
Category-wise spending trends
Monthly/yearly comparisons
Exportable reports


Savings Goals

Create and track savings goals
Progress visualization
Target date setting
Goal categories
Achievement celebrations



Additional Features

Bill Management

Bill due date tracking
Payment reminders
Automatic bill recognition
Payment history


Notifications

Budget alerts
Bill payment reminders
Large transaction alerts
Goal achievement notifications
Custom notification settings

### Data Management
- Local storage for all data
- Export/Import functionality
- Data backup to device storage
- Automatic state persistence
